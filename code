from googleapiclient.discovery import build
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Initialize YouTube API
api_key = 'AIzaSyAg_dqXlgYhCRbvbEVY7jjV8qyJbJl6mOM'  # Replace with your actual API key
youtube = build('youtube', 'v3', developerKey=api_key)

def youtube_search(query, max_results=50):
    search_response = youtube.search().list(
        q=query,
        part='id,snippet',
        maxResults=max_results,
        type='video',
        order='viewCount'
    ).execute()

    channels = []
    videos = []
    for search_result in search_response.get('items', []):
        video_id = search_result['id']['videoId']
        channel_id = search_result['snippet']['channelId']
        videos.append(video_id)
        if channel_id not in channels:
            channels.append(channel_id)
    return channels, videos

def get_channel_stats(youtube, channel_ids):
    all_data = []
    for channel_id in channel_ids:
        request = youtube.channels().list(
            part='snippet, statistics', id=channel_id)
        response = request.execute()

        if 'items' in response and len(response['items']) > 0:
            channel_info = response['items'][0]
            data = dict(
                channel_name=channel_info['snippet']['title'],
                channel_url=f'https://www.youtube.com/channel/{channel_id}',
                subscriber=int(channel_info['statistics']['subscriberCount']),
                views=int(channel_info['statistics']['viewCount']),
                total_videos=int(channel_info['statistics']['videoCount'])
            )
            all_data.append(data)
    return all_data

def get_video_stats(youtube, video_ids):
    video_data_list = []
    for video_id in video_ids:
        video_response = youtube.videos().list(
            part='snippet, statistics',
            id=video_id
        ).execute()

        if 'items' in video_response and len(video_response['items']) > 0:
            item = video_response['items'][0]
            stats = item['statistics']
            snippet = item['snippet']
            video_data_list.append({
                'channel_name': snippet['channelTitle'],
                'title': snippet['title'],
                'views': int(stats.get('viewCount', 0)),
                'likes': int(stats.get('likeCount', 0)),
                'comments': int(stats.get('commentCount', 0))
            })
    return video_data_list

# Ask for user input for the search query
search_query = input("Enter your search query: ")

# Search for channels and videos based on user input
channel_ids, video_ids = youtube_search(search_query)
channel_statistics = get_channel_stats(youtube, channel_ids)
video_statistics = get_video_stats(youtube, video_ids)

# Create DataFrames
channel_data = pd.DataFrame(channel_statistics)
video_data = pd.DataFrame(video_statistics)

# Sort and get top 5 channels
top_channels = channel_data.sort_values(by='subscriber', ascending=False).head(5)

# Visualization
sns.set(rc={'figure.figsize':(10,8)})

# Plot for top 5 channels by subscribers
plt.figure()
sns.barplot(x='channel_name', y='subscriber', data=top_channels)
plt.title('Top 5 Channels by Subscriber Count')
plt.xticks(rotation=45)
plt.ylabel('Subscribers')
plt.xlabel('Channel Name')
plt.show()

# Plot for views of top 5 channels
plt.figure()
sns.barplot(x='channel_name', y='views', data=top_channels)
plt.title('Views of Top 5 Channels')
plt.xticks(rotation=45)
plt.ylabel('Views')
plt.xlabel('Channel Name')
plt.show()

# Plot for total videos of top 5 channels
plt.figure()
sns.barplot(x='channel_name', y='total_videos', data=top_channels)
plt.title('Total Videos of Top 5 Channels')
plt.xticks(rotation=45)
plt.ylabel('Total Videos')
plt.xlabel('Channel Name')
plt.show()

# Plot for subscribers
plt.figure()
sns.barplot(x='channel_name', y='subscriber', data=channel_data)
plt.title('Subscriber Count by Channel')
plt.xticks(rotation=45)
plt.ylabel('Subscribers')
plt.xlabel('Channel Name')
plt.show()

# Plot for views
plt.figure()
sns.barplot(x='channel_name', y='views', data=channel_data)
plt.title('View Count by Channel')
plt.xticks(rotation=45)
plt.ylabel('Views')
plt.xlabel('Channel Name')
plt.show()


# Plot for total videos
plt.figure()
sns.barplot(x='channel_name', y='total_videos', data=channel_data)
plt.title('Total Videos by Channel')
plt.xticks(rotation=45)
plt.ylabel('Total Videos')
plt.xlabel('Channel Name')
plt.show()


# Display the most popular video for each channel
for index, row in top_channels.iterrows():
    print(f"Channel: {row['channel_name']}")
    print(f"Channel URL: {row['channel_url']}")
    print(f"Subscribers: {row['subscriber']}")
    print()
